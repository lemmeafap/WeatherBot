from aiogram import Bot, Dispatcher, executor, types
from configs import open_weather_token, BOT_TOKEN
import datetime
import requests

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.reply('üëã–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ‚òî.')

@dp.message_handler()
async def get_weather(message: types.Message):
    try:
        response = requests.get(
            f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric')

        data = response.json()

        city = data['name']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        temp = data['main']['temp']
        sunrise = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        # cur_weather = data['weather']['description']
        wind = data['wind']['speed']

        await message.reply(f'''***{datetime.datetime.now().strftime('%H:%M %d-%m-%Y')}***
–í –≥–æ—Ä–æ–¥–µ: {city}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C
–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –∫–º/—á
–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ –≤ {sunrise}
–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞ –≤ {sunset}
---–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!---''')


    except Exception as ex:
        await message.reply(ex)
        await message.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')


if __name__ == '__main__':
    executor.start_polling(dp)
